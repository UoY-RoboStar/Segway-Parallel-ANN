/*
  Notes: 

  For now, all IndexedLayerRes etc calls, because CZT cannot handle partial channel instantiations in synchronisations:
  Always return just the full channel, layerRes or nodeOut. 


  Author: Ziggy Attala
*/

//import "boolean_query.eol";
import "RoboChart2Circus_2024/Transformation/RC2Circus.eol";
import "RoboChart2Circus_M2MExtension.eol";

//RC!ANNController.all().at(0).println();

var ann = RC!ANNController.all().at(0);

//First, lets test creating functions ourselves, Z paragraphs of functions.


ann.annSemantics();

/*****************************RULE IMPLEMENTATIONS*********************************************/

//RULE 1: Implementation of [c : ANNController]_ANN : Program, top-level rule, returns a Z!Spec.
operation RC!ANNController annSemantics() : Z!Spec {
  var channelPars = self.ANNChannelDecl();
  var annConsts = self.ANNConstants();
  var annProc = self.ANNProc();
  
  annConsts.println();
  
  channelPars.println();
  channelPars.addAll(annConsts);
  channelPars.add(annProc);
  
  channelPars.println();
  
  var zSect = createZSect(self.name, channelPars, Sequence{});
  return createSpec(zSect);
  
}

//RULE 2: Function ANNChannelDecl().
operation RC!ANNController ANNChannelDecl() : Sequence<Z!Para> {

  var annChannels = new Sequence<Z!Para>;
  
  var layerRes = createProdChanPar("layerRes", Sequence{"nat".createRefExpr(false, false), "nat".createRefExpr(false, false), "real".createRefExpr(false, false)});
  
  var nodeOut = createProdChanPar("nodeOut", Sequence{"nat".createRefExpr(false, false), "nat".createRefExpr(false, false), "nat".createRefExpr(false, false), "real".createRefExpr(false, false)});
  
  var inputEvents = self.sortedInputEvents();
  
  var outputEvents = self.sortedOutputEvents();  

  for(chan : RC!Event in inputEvents) {
     annChannels.add(Sequence{chan.name}.createChannelPara(chan.name, chan.type.ref.name));
  }
  
  for(chan : RC!Event in outputEvents) {
     annChannels.add(Sequence{chan.name}.createChannelPara(chan.name, chan.type.ref.name));
  }
  
  //declare terminate channel
  var terminateChannel = Sequence{"terminate"}.createChannelPara("terminate");
  
  annChannels.add(layerRes);
  annChannels.add(nodeOut);
  annChannels.add(terminateChannel);
  
  return annChannels;
  
}

//RULE 3: Function ANNConstants
//Defines all the constants in an axiom, in an AxPara.
operation RC!ANNController ANNConstants() : Sequence<Z!Para> {
		
		var weightsPara = createAxiomPara("weights", "real list list list", self.annparameters.weights.createSeqExpr());
		var biasesPara = createAxiomPara("biases", "real list list", self.annparameters.biases.createSeqExpr());
		var inRangesPara = createAxiomPara("inRanges", "(real \\<times> real) list", self.annparameters.inRanges.createSeqExpr());
		var outRangesPara = createAxiomPara("outRanges", "(real \\<times> real) list", self.annparameters.outRanges.createSeqExpr());
		var annRangePara = createAxiomPara("annRange", "(real \\<times> real)", self.annparameters.annRange.createExpr());
		
		//Implementing the concatenation specified 
		var base = self.LStructure(0).createNumExpr(); //To get the input size, and create it as an expression. 
		var layerInputPara = createAxiomPara("layerInput", "nat list", self.annparameters.layerstructure.createSeqExprAppended(base));
		
		return Sequence{weightsPara, biasesPara, inRangesPara, outRangesPara, annRangePara, layerInputPara};
		
}

//RULE 4: Function ANNProc
operation RC!ANNController ANNProc() : Z!ProcessPara {

  var mainAction = "CircANN";
  
  var collatorPar = self.Collator();
  var edgePar = self.Edge();
  var nodePar = self.Node();
  var hiddenLayerPar = self.HiddenLayer();
  var hiddenLayersPar = self.HiddenLayers(self.layerNo() - 1);
  var outputLayerPar = self.OutputLayer();
  
  //ANN Action Paragraph. 
  var hiddenLayersCall = "HiddenLayers".createCallAction();
  var outputLayerCall = "OutputLayer".createCallAction();

  var annParAction = createParallelAction(createParamChannelSet("layerRes", Sequence{(self.layerNo()-1).createNumExpr()}), hiddenLayersCall, outputLayerCall);
  var annFinal = createAction2("SeqAction", annParAction, "ANN".createCallAction());
  
  var annPara = annFinal.createActionPara("ANN");
  
  var interpreterPara = self.Interpreter();
  var circANNPara = self.CircANN();
  
  var annProcFull = Sequence{collatorPar, edgePar, nodePar, hiddenLayerPar, hiddenLayersPar, outputLayerPar, annPara, interpreterPara, circANNPara}.createBasicProcess(mainAction);
  
  return annProcFull.createProcessPara("AnglePIDANN", true);
  
}


//Rule 5: Function HiddenLayers:
operation RC!ANNController HiddenLayers(l : Integer) : Z!ActionPara {
    return self.HiddenLayersInt(l).createActionPara("HiddenLayers");
}


//Rule 6: Function OutputLayer:
operation RC!ANNController OutputLayer() : Z!ActionPara {
    
   var nodeArgs = Sequence{"l".createRefExpr(false, false), "i".createRefExpr(false, false), self.LStructure(self.layerNo()-1).createNumExpr()};
     
   var nodeCall = "Node".createCallAction(nodeArgs);
     
  var varList = createVarDecl(Sequence{"i"}, createUpToExpr(1.createNumExpr(), self.LStructure(self.layerNo()).createNumExpr()));
  
  var declList = Set{varList}.createDeclList();
  
  var iteAction = createParallelActionIte(createParamChannelSet("layerRes", Sequence{createNumExpr(self.layerNo()-1)}), nodeCall, declList); 
    
  return iteAction.createActionPara("OutputLayer");

}


//Helper operation for making parameterised Channel Sets. 
//Takes the channel name, a String, the parameters of this channel to be partially instantiated:expr:Sequence<Z!Expr>
//returns a Z Circus Channel Set object. 
operation createParamChannelSet(chan : String, params : Sequence<Z!Expr>) : Z!CircusChannelSet {
   var paramComm = createOutputCommunication(chan, params);
   var comms = new Sequence<Z!Communication>;
   comms.add(paramComm);
   var syncset = createChannelSet(createComBasicChannelSetExpr(comms));
   return syncset;
}

//Operation to just create the CircANN channel set, as it requires two communications.
//Pass the parameter of layerNo instead of making this an operation on ANNControllers, it doesn't need to be.
operation createCircANNChanSet(layerNo : Integer) : Z!CircusChannelSet {
   var paramComm = createOutputCommunication("layerRes", Sequence{createNumExpr(0)});
   var paramComm2 = createOutputCommunication("layerRes", Sequence{createNumExpr(layerNo)});
   var comms = new Sequence<Z!Communication>;
   comms.add(paramComm);
   comms.add(paramComm2);
   var syncset = createChannelSet(createComBasicChannelSetExpr(comms));
   return syncset;
}



//Rule 7: Function CircANN:
operation RC!ANNController CircANN() : Z!ActionPara {
   
   var interpreterCall = "Interpreter".createCallAction();
   
   var annCall = "ANN".createCallAction();
   
  //Parallelism between ANN and Interpreter
  var annParAction = createParallelAction(createCircANNChanSet(self.layerNo()), interpreterCall, annCall);
    
  //Need a hiding action. 
  var hideAction = createHideAction(self.IndexedLayerRes(), annParAction);
  
  //Interrupt action:
  var terminateComm = new Z!Communication;
     
  terminateComm.channelExpr = "terminate".createRefExpr(false, false);
     
  var terminateAction = createPrefixingAction(terminateComm, createSkipAction());
  
  var interruptAction = createAction2("InterruptAction", hideAction, terminateAction);
	
  return interruptAction.createActionPara("CircANN");

}

operation gen_string(event_index) : String {
  return "(normIn(" + event_index.asString() + ",x))";
}

operation gen_out_string(out_index) : String {
  return "(denormOut("+ out_index.asString() + ", y))";
}

//Rule 8: Function Interpreter
operation RC!ANNController Interpreter() : Z!ActionPara {
  //Entire thing is SEQUENCE of three processes.
  //Input cannot be 0, WF conditions.
  var inputRecursivePara = createSkipAction();
  //Each event has an index, 1-based.
  var in_index = 1;
  for(e in self.sortedInputEvents()) {
    var inEvent = createInputCommunication(e.name, "x", Sequence{});
	
    var layerResEvent = createOutputCommunication("layerRes", Sequence{createNumExpr(0), 
     																  createNumExpr(in_index),
     																  gen_string(in_index).createRefExpr(false,false)});
    var prefixAction1 = createPrefixingAction(layerResEvent, createSkipAction());
     
    var prefixAction2 = createPrefixingAction(inEvent, prefixAction1);
     
    if(in_index == 1) {
      inputRecursivePara = prefixAction2;
    }
    if(in_index > 1) {
      inputRecursivePara = createAction2("InterleaveAction", inputRecursivePara, prefixAction2);
    }
    in_index++;
  }
  
  var outputRecursivePara = createSkipAction();
  var out_index = 1;
  for(e in self.sortedOutputEvents()) {
    var outEvent = createOutputCommunication(e.name, Sequence{gen_out_string(out_index).createRefExpr(false, false)});
	
    var layerResEvent = createInputCommunication("layerRes", "y", Sequence{createNumExpr(self.layerNo()), 
     																  createNumExpr(out_index)});
     
    var prefixAction1 = createPrefixingAction(outEvent, createSkipAction());
     
    var prefixAction2 = createPrefixingAction(layerResEvent, prefixAction1);
     
    if(out_index == 1) {
      outputRecursivePara = prefixAction2;
    }
    if(out_index > 1) {
      outputRecursivePara = createAction2("InterleaveAction", outputRecursivePara, prefixAction2);
    }
    out_index++;
  }
  
  var interpreterSeq = createAction2("SeqAction",inputRecursivePara, outputRecursivePara); 
  var interpreterAction = createAction2("SeqAction", interpreterSeq, "Interpreter".createCallAction());
  var interpreterPara = interpreterAction.createActionPara("Interpreter");
  
  return interpreterPara;
}


//Rule 9: Function LStructure 
operation RC!ANNController LStructure(i : Integer) : Integer {
  if(i == 0) {
    return self.annparameters.inputContext.allEvents().size();
  }
  else {
    //0 indexing. 
    return self.annparameters.layerstructure.values.at(i-1).value;
  }
}

//RULE 10: Function layerNo.
operation RC!ANNController layerNo() : Integer {
  var layerstructure = self.annparameters.layerstructure;
  var lSize = layerstructure.values.size();
  return lSize;
}



/***************************************************HELPER RULES ************************************************************/



//Collator Action Paragraph, we still need this. 
operation RC!ANNController Collator() : Z!ActionPara {
  var basicAction = self.CollatorAction();
  
  var varList1 = createVarDecl(Sequence{"l", "n", "i"}, "int");
  var varList2 = createVarDecl(Sequence{"sum"}, "real");
  
  var declList = Set{varList1, varList2}.createDeclList();
  
  var paramProcess = basicAction.createParamAction(declList);
  
  var collatorActionPar = paramProcess.createActionPara("Collator");
  
  return collatorActionPar;
  
}


operation RC!ANNController CollatorAction() : Z!CircusAction {
//Still need to create the ext choice and the two guards, but thats fine. 
    
     var layerResEvent = createOutputCommunication("layerRes", 
     	Sequence{"l".createRefExpr(false, false), "n".createRefExpr(false, false), nodeOutputExp()}); 
	  
	 var prefixAction = createPrefixingAction(layerResEvent, createSkipAction());
	 
	 
	 var nodeOutEvent = createInputCommunication("nodeOut", "x", Sequence{"l".createRefExpr(false,false), 
     																"n".createRefExpr(false, false),
     																"layerInput(l)-i+1".createRefExpr(false, false)});
     																
     var collatorArgs = Sequence{"l".createRefExpr(false,false), "n".createRefExpr(false,false), "i-1".createRefExpr(false,false), "sum + x".createRefExpr(false,false)};
     
     var callEvent = "Collator".createCallAction(collatorArgs);
     
     var prefixActionNode = createPrefixingAction(nodeOutEvent, callEvent);
     //guard for first action. 
     var baseGuard = createEqualsExpr("l".createRefExpr(false, false), 0.createNumExpr()).createMemPredEquality();
     var recursiveGuard = createEqualsExpr("l".createRefExpr(false, false), 1.createNumExpr()).createMemPredEquality();
     
     var prefixActionGuarded = createGuardedAction(baseGuard, prefixAction);
     var recursiveActionGuarded = createGuardedAction(recursiveGuard, prefixActionNode);
     
     return Sequence{prefixActionGuarded, recursiveActionGuarded}.createSequenceAsExtchoiceAction();
     
}


//Function Edge
operation RC!ANNController Edge() : Z!ActionPara {
   var basicAction = self.EdgeAction(); 

  var varList = createVarDecl(Sequence{"l", "n", "i"}, "int");
  
  var declList = Set{varList}.createDeclList();
  
  var paramProcess = basicAction.createParamAction(declList);
  
  var edgeActionPar = paramProcess.createActionPara("Edge");
  
  return edgeActionPar;
}


//Edge Helper Rule:
operation RC!ANNController EdgeAction() : Z!CircusAction {
	
     var layerResEvent = createInputCommunication("layerRes", "x", Sequence{"l-1".createRefExpr(false, false),
     																		"i".createRefExpr(false,false)});
	
     var nodeOutEvent = createOutputCommunication("nodeOut", Sequence{"l".createRefExpr(false, false), 
     																  "n".createRefExpr(false, false),
     																  "i".createRefExpr(false, false),
     																  weightedOutputExp()});
     
     //Have to make nested prefixes backwards. 
     
     var prefixActionEnd = createPrefixingAction(nodeOutEvent, createSkipAction());
     
     var prefixAction = createPrefixingAction(layerResEvent, prefixActionEnd);

     return prefixAction;
   
}


//Node Process.
operation RC!ANNController Node() : Z!ActionPara {
  var basicAction = self.NodeAction(); 
  
  var varList = createVarDecl(Sequence{"l", "n", "inpSize"}, "int");
  
  var declList = Set{varList}.createDeclList();
  
  var paramProcess = basicAction.createParamAction(declList);
  
  var nodePar = paramProcess.createActionPara("Node");
  
  return nodePar;
}


//Node Action method.
operation RC!ANNController NodeAction() : Z!CircusAction {
  
   var edgeArgs = Sequence{"l".createRefExpr(false, false), "n".createRefExpr(false, false), "i".createRefExpr(false, false)};
     
   var edgeCall = "Edge".createCallAction(edgeArgs);
     
  var varList = createVarDecl(Sequence{"i"}, createUpToExpr(1.createNumExpr(), "inpSize".createRefExpr(false, false)));
  
  var declList = Set{varList}.createDeclList();
  
  var iteAction = createSeqIteAction(edgeCall, declList); 
  
  //Parallel, synchronising on indexednodeout. 
  
  //CallACtion, 
  
  //HideAction, 
  
  var collatorArgs = Sequence{"l".createRefExpr(false, false), "n".createRefExpr(false, false), "inpSize".createRefExpr(false, false), 0.createNumExpr()};
  
  var collatorCall = "Collator".createCallAction(collatorArgs);
  
  var collatorHideAction = createHideAction(createParamChannelSet("nodeOut", Sequence{"l".createRefExpr(false,false), "n".createRefExpr(false,false)}), collatorCall);
  
  var parNode = createParallelAction(createParamChannelSet("nodeOut", Sequence{"l".createRefExpr(false,false), "n".createRefExpr(false,false)}), iteAction, collatorHideAction);
  
  return parNode;
}


//Function HiddenLayer. 
operation RC!ANNController HiddenLayer() : Z!ActionPara {
  var basicAction = self.HiddenLayerAction(); 
  
  var varList = createVarDecl(Sequence{"l", "s", "inpSize"}, "int");
  
  var declList = Set{varList}.createDeclList();
  
  var paramProcess = basicAction.createParamAction(declList);
  
  var hiddenLayerPar = paramProcess.createActionPara("HiddenLayer");
  
  return hiddenLayerPar;
}


//HiddenLayer Helper Rule:
operation RC!ANNController HiddenLayerAction() : Z!CircusAction {
  
   var nodeArgs = Sequence{"l".createRefExpr(false, false), "i".createRefExpr(false, false), "inpSize".createRefExpr(false, false)};
     
   var nodeCall = "Node".createCallAction(nodeArgs);
     
  var varList = createVarDecl(Sequence{"i"}, createUpToExpr(1.createNumExpr(), "s".createRefExpr(false, false)));
  
  var declList = Set{varList}.createDeclList();
  
  var iteAction = createParallelActionIte(createParamChannelSet("layerRes", Sequence{"(l-1)".createRefExpr(false, false)}), nodeCall, declList); 

  return iteAction;
}



//Internal behaviour of HiddenLayers, that returns a CircusAction.
operation RC!ANNController HiddenLayersInt(l : Integer) : Z!CircusAction {
  var hiddenLayerArgs = Sequence{l.createNumExpr(), self.LStructure(l).createNumExpr(), self.LStructure(l-1).createNumExpr()};
  var hiddenLayerCall = "HiddenLayer".createCallAction(hiddenLayerArgs);
  
  if(l == 1) {
    return hiddenLayerCall;
  }
  
  else {
    return createParallelAction(createParamChannelSet("layerRes", Sequence{createNumExpr(l-1)}), self.HiddenLayersInt(l-1), hiddenLayerCall);
  }
}

//The output of an edge, the weighted output expression.,
operation weightedOutputExp() : Z!RefExpr {
  var call = "(x * (weights(l)(n)(i)))";
  return call.createRefExpr(false,false);
}




//Helper Rule: Create a channel para with a product type. 
operation createProdChanPar(name : String, type_expr : Sequence<Z!Expr>) : Z!Para {
  //Create arbritrary product expression: 
  var prodexpr = new Z!ProdExpr;
  prodexpr.exprList = new Z!ZExprList;
  prodexpr.exprList.exprs = type_expr;
  
  var para = new Z!ChannelPara;
	
  para.declList = new Z!ZDeclList;

  var decl = new Z!ChannelDecl;
  
  decl.genFormals = createNameList(Sequence{});
	
  //the second element is the (possibly empty) list of declared channel names
  decl.channelNameList = createNameList(Sequence{name});

  decl.expr = prodexpr;
	
  para.declList.decls.add(decl);
  
  para.name = name.createZName();
  
  return para;
  
}



//Helper operation, returns the sorted input events
operation RC!ANNController sortedInputEvents() : Sequence<Z!Events> {
  return self.annparameters.inputcontext.allEvents().sortBy(it | it.index);
}

operation RC!ANNController sortedOutputEvents() : Sequence<Z!Events> {
  return self.annparameters.outputcontext.allEvents().sortBy(it | it.index);
}


//helper operation, creates an axiom paragraph for a constnat.
//Given a name, a type as a string, and an expression to set this constant to with MemPred.
operation createAxiomPara(name: String, type : String, value : Z!Expr) : Z!Para {
	var weightsDecl = new Z!AxPara;
		weightsDecl.box = Z!Box#AxBox;
		weightsDecl.zSchText = new Z!ZSchText;
			
		var declList = new Z!ZDeclList;
		declList.decls.add(generateVarDecl(Sequence{name}, type));
		
		weightsDecl.zSchText.declList = declList;
		
		
	
		//We are using a MEM PRED instead of applexpr. Pred that relates, on the left, the weights reference expression, on the right, the set expression created from the 
		//seqexpr of weights. 
		var pred =  new Z!MemPred;
		pred.leftExpr = value;
		var set = new Set<Z!Expr>;
		set.add(value);
	
		pred.rightExpr = set.createSetExpr();
		pred.mixFix = true;
		
		//the SET EXPRESSION, is definitely right, I'm not sure if the 
		//we need a REFERNECE EXPRESSION on the LEFT: ref_expr: "weights2"
		//Then the SET EXPRESSION on the RIGHT, WE ALREADY HAVE THIS, predicate.expr.setExpr is this SET EXPRESSION. 
		weightsDecl.zSchText.pred = pred;
		
		return weightsDecl;
}

//Helper operation, generate a variable declaration given a list of names and a type.
operation generateVarDecl(nameList : Sequence<String>, type : String):Z!VarDecl {
	var varDecl = new Z!VarDecl;
	varDecl.nameList = createNameList(nameList);
	varDecl.expr = type.createRefExpr(false, false);

	return varDecl;
}

//The output of a node, the base case communication of Collator.
operation nodeOutputExp() : Z!RefExpr {
  var call = "(relu(sum + (biases(l)(n))))";
  return call.createRefExpr(false,false);
}



//RULE 15: Function IndexedLayerRes.
operation RC!ANNController IndexedLayerRes() : Z!CircusChannelSet {
  var basicCSExp = createBasicChannelSetExpr(Set{"layerRes"});
  var channelSet = createChannelSet(basicCSExp);
  return channelSet;
}



//RULE 20: Function AllNodeOut.
operation RC!ANNController AllNodeOut() : Z!CircusChannelSet {
  /*var channelNames = Set{1..(self.layerNo())}.collect(l | 
        Set{1..(self.LStructure(l))}.collect(n | 
          Set{1..(self.LStructure(l-1))}.collect(i | 
            nodeOut(l, n, i))));
  var basicCSExp = createBasicChannelSetExpr(channelNames.flatten().asSet());
  var channelSet = createChannelSet(basicCSExp);*/
  var basicCSExp = createBasicChannelSetExpr(Set{"nodeOut"});
  var channelSet = createChannelSet(basicCSExp);
  return channelSet;
}

//RULE 21: Function IndexedNodeOut
//For now, this is a helper rule, and ALWAYS NODEOUT, will change later.
operation RC!ANNController IndexedNodeOut() : Z!CircusChannelSet {
  var basicCSExp = createBasicChannelSetExpr(Set{"nodeOut"});
  var channelSet = createChannelSet(basicCSExp);
  return channelSet;
}














/******************************************************************OLD RULES **************************************************/






//Rule 12: Function ANNRenamed

operation RC!ANNController ANNRenamed() : Z!ActionPara {
  var annRenamedAction = new Z!RenameAction;
  annRenamedAction.circusAction = "ANN".createCallAction();
  
  //Sequence of strings, that is fine, assignment pairs will be pairs. 
  //
  var orderedLayerRes = Set{0, self.layerNo()}.collect(l | 
  	Set{1..self.LStructure(l)}.collect(n | 
  	  layerRes(l, n)
  	));
  	
  var orderedLayerResS = orderedLayerRes.flatten().asSequence();
  
  //concatenation of all events. 
  var eventListFull = self.annparameters.inputcontext.allEvents();
  
  eventListFull.addAll(self.annparameters.outputcontext.allEvents());
  
  var eventList = eventListFull.collect(e | e.name);
  
  var assignmentPairs = createAssignmentPairs(orderedLayerResS, eventList);
  
  annRenamedAction.assignmentPairs = assignmentPairs;
  
  
  var terminateComm = new Z!Communication;
     
  terminateComm.channelExpr = "terminate".createRefExpr(false, false);
     
  var prefixAction = createPrefixingAction(terminateComm, createSkipAction());
  
  var circusAction = createAction2("InterruptAction", annRenamedAction, prefixAction);
	
  return circusAction.createActionPara("ANNRenamed");
}



//HELPER RULES: Not in semantic rules, but helpers to implement the semantic rules: 




